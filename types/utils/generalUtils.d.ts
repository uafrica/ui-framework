import { ReactElement } from "react";
declare function capitalize(str: string): string;
declare function getUUIDFilename(url: string): string;
declare function isCsv(file: any): RegExpExecArray | null | false;
declare function isImage(file: any): RegExpExecArray | null | false;
declare function isKML(file: any): RegExpExecArray | null | false;
declare function isPdf(file: any): RegExpExecArray | null | false;
declare function reverseArray(arr: any[]): any[];
declare function serialize(obj: any): string;
declare function checkTokenExpired(_store: any, response: any): void;
declare function checkAccountClosed(store: any, response: any): void;
declare function checkMaintenanceMode(store: any, response: any): void;
declare function getErrorString(result: any): string;
declare function getError(result: any, hideConsoleLog?: boolean | null): string;
declare function showError(error: Error | string | undefined): ReactElement | null;
declare function shorten(str: string | null | undefined, count: number): string;
declare function humanReadableToKey(string: string): string;
declare function keyToHumanReadable(key: string | undefined): string;
declare function cleanURL(url: string): string;
declare function cleanPhone(phone: string, removeSpaces?: boolean): string;
declare function cleanUsername(username: string): string;
declare function defaultString(str: string): string;
declare function padLeadingZeros(num: number, size: number): string;
declare function clone(obj: any): any;
declare function swapValues(obj: any, prop1: string, prop2: string): void;
declare function isScreenDesktopSize(): boolean;
declare function kebabCaseToSentenceCase(originalString: string): string;
declare function isBrowserOutdated(browserName: string, browserVersion: string): boolean;
declare function getDataUrl(file: any): Promise<unknown>;
declare function displayString(str: any): any;
declare function isNotEmpty(value: any): boolean;
declare function getBrowserIcon(browserName: string): any;
declare function parseFieldsAsFloatsInsideObject(objData: any, arr: string[]): any;
declare function getFileExtension(filename: string): string | undefined;
declare function openInNewTab(url: string, store: any): void;
declare function calculateSum(items: any[], field: string, decimals?: number): any;
declare function differenceBetweenObjects(origObj: any, newObj: any): unknown;
declare function mergeArrays(arr1: any[], arr2: any[], val: string): any[];
declare function getObjectByPropertyWithValue(array: any[], property: string, value: any): any;
declare function omitPropsFromObj(obj: any, ...props: any): any;
declare const duplicateObjectsInArray: (arr: any[], key: string) => any[];
export { capitalize, getError, getErrorString, showError, getUUIDFilename, isImage, isCsv, isKML, isPdf, reverseArray, serialize, checkTokenExpired, checkAccountClosed, checkMaintenanceMode, shorten, humanReadableToKey, keyToHumanReadable, cleanURL, cleanPhone, defaultString, padLeadingZeros, clone, cleanUsername, swapValues, isScreenDesktopSize, kebabCaseToSentenceCase, isBrowserOutdated, getDataUrl, displayString, isNotEmpty, getBrowserIcon, getFileExtension, parseFieldsAsFloatsInsideObject, openInNewTab, calculateSum, differenceBetweenObjects, mergeArrays, getObjectByPropertyWithValue, omitPropsFromObj, duplicateObjectsInArray };
